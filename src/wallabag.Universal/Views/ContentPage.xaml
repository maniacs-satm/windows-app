<Page
    x:Class="wallabag.Views.ContentPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:common="using:wallabag.Common"
    xmlns:controls="using:wallabag.Controls"
    xmlns:conv="using:wallabag.Converter"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:data="using:wallabag.Data.ViewModels"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:local="using:wallabag.Views"
    xmlns:m="using:wallabag.Models"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:t10="using:Template10.Controls"
    xmlns:vm="using:wallabag.ViewModels"
    common:TitleBarExtensions.BackgroundColor="{ThemeResource SystemChromeMediumColor}"
    common:TitleBarExtensions.ButtonBackgroundColor="{ThemeResource SystemChromeMediumColor}"
    DataContext="{Binding Main, Source={StaticResource Locator}}"
    mc:Ignorable="d">
    <Page.Resources>
        <conv:BooleanToVisibilityNegatedConverter x:Key="BooleanToVisibilityNegatedConverter" />
        <conv:EnumBooleanConverter x:Key="EnumBooleanConverter" />
        <MenuFlyout x:Key="ItemContextMenu">
            <MenuFlyoutItem
                x:Name="ContextMenuMarkAsRead"
                x:Uid="MarkAsReadMenuFlyoutItem"
                Style="{StaticResource MenuFlyoutItemIconTemplate}"
                Click="ContextMenuMarkAsRead_Click"
                Tag="&#xE001;"
                Text="Mark as read"
                Visibility="{Binding Model.IsRead, Converter={StaticResource BooleanToVisibilityNegatedConverter}}" />
            <MenuFlyoutItem
                x:Name="ContextMenuUnmarkAsRead"
                x:Uid="UnmarkAsReadMenuFlyoutItem"
                Style="{StaticResource MenuFlyoutItemIconTemplate}"
                Click="ContextMenuMarkAsRead_Click"
                Tag="&#xE109;"
                Text="Unmark as read"
                Visibility="{Binding Model.IsRead, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <MenuFlyoutItem
                x:Name="ContextMenuMarkAsFavorite"
                x:Uid="MarkAsFavoriteMenuFlyoutItem"
                Style="{StaticResource MenuFlyoutItemIconTemplate}"
                Click="ContextMenuMarkAsFavorite_Click"
                Tag="&#xE00B;"
                Text="Mark as favorite"
                Visibility="{Binding Model.IsStarred, Converter={StaticResource BooleanToVisibilityNegatedConverter}}" />
            <MenuFlyoutItem
                x:Name="ContextMenuUnmarkAsFavorite"
                x:Uid="UnmarkAsFavoriteMenuFlyoutItem"
                Style="{StaticResource MenuFlyoutItemIconTemplate}"
                Click="ContextMenuMarkAsFavorite_Click"
                Tag="&#xE006;"
                Text="Unmark as favorite"
                Visibility="{Binding Model.IsStarred, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <MenuFlyoutSeparator />
            <MenuFlyoutItem
                x:Name="ContextMenuShareItem"
                x:Uid="ShareMenuFlyoutItem"
                Style="{StaticResource MenuFlyoutItemIconTemplate}"
                Click="ContextMenuShareItem_Click"
                Tag="&#xE72D;"
                Text="Share" />
            <MenuFlyoutItem
                x:Name="ContextMenuOpenInBrowser"
                x:Uid="OpenInBrowserMenuFlyoutItem"
                Style="{StaticResource MenuFlyoutItemIconTemplate}"
                Click="ContextMenuOpenInBrowser_Click"
                Tag="&#xE12B;"
                Text="Open in browser" />
            <MenuFlyoutSeparator />
            <MenuFlyoutItem
                x:Name="ContextMenuDeleteItem"
                x:Uid="DeleteMenuFlyoutItem"
                Style="{StaticResource MenuFlyoutItemIconTemplate}"
                Click="ContextMenuDeleteItem_Click"
                Tag="&#xE107;"
                Text="Delete" />
        </MenuFlyout>
        <Style x:Key="MenuFlyoutItemIconTemplate" TargetType="MenuFlyoutItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="MenuFlyoutItem">
                        <Grid
                            x:Name="LayoutRoot"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="PointerOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Background">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightListLowBrush}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TextBlock" Storyboard.TargetProperty="Foreground">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Background">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightListMediumBrush}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TextBlock" Storyboard.TargetProperty="Foreground">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <PointerDownThemeAnimation Storyboard.TargetName="TextBlock" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TextBlock" Storyboard.TargetProperty="Foreground">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlDisabledBaseLowBrush}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition From="Pressed" To="Normal">
                                            <Storyboard>
                                                <PointerUpThemeAnimation Storyboard.TargetName="TextBlock" />
                                            </Storyboard>
                                        </VisualTransition>
                                        <VisualTransition From="Pressed" To="PointerOver">
                                            <Storyboard>
                                                <PointerUpThemeAnimation Storyboard.TargetName="TextBlock" />
                                            </Storyboard>
                                        </VisualTransition>
                                    </VisualStateGroup.Transitions>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckPlaceholderStates">
                                    <VisualState x:Name="NoPlaceholder" />
                                    <VisualState x:Name="CheckPlaceholder">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TextBlock" Storyboard.TargetProperty="Margin">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="PaddingSizeStates">
                                    <VisualState x:Name="DefaultPadding" />
                                    <VisualState x:Name="NarrowPadding">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Padding">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource MenuFlyoutItemThemePaddingNarrow}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <StackPanel Orientation="Horizontal">
                                <FontIcon
                                    x:Name="TextBlock"
                                    Width="16"
                                    Height="16"
                                    Margin="0,0,12,0"
                                    FontSize="16"
                                    Glyph="{TemplateBinding Tag}" />
                                <TextBlock
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Text="{TemplateBinding Text}"
                                    TextTrimming="CharacterEllipsis" />
                            </StackPanel>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Storyboard x:Name="ShowDragDropGridStoryboard">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="dragDropGrid" Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="0">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Visible</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="dragDropGrid" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Name="HideDragDropGridStoryboard">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="dragDropGrid" Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Collapsed</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="dragDropGrid" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Name="ShowSearch">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SearchGrid" Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="0">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Visible</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SearchGrid" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateY)">
                <EasingDoubleKeyFrame KeyTime="0" Value="-48" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SearchGrid" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Name="ShowFilterPopup">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FilterPopup" Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="0">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Visible</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FilterPopup" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleX)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0.1" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FilterPopup" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleY)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0.1" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
            </DoubleAnimationUsingKeyFrames>
            <PointAnimationUsingKeyFrames
                EnableDependentAnimation="True"
                Storyboard.TargetName="FilterPopup"
                Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                <EasingPointKeyFrame KeyTime="0" Value="0,0" />
                <EasingPointKeyFrame KeyTime="0:0:0.3" Value="0.5,0.5" />
            </PointAnimationUsingKeyFrames>
            <DoubleAnimation
                d:IsOptimized="True"
                Duration="0:0:0.3"
                Storyboard.TargetName="ArrowTextBlock"
                Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.Rotation)"
                To="180" />
            <PointAnimationUsingKeyFrames
                EnableDependentAnimation="True"
                Storyboard.TargetName="ArrowTextBlock"
                Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                <EasingPointKeyFrame KeyTime="0:0:0.3" Value="0.514,0.514" />
            </PointAnimationUsingKeyFrames>
            <DoubleAnimation
                d:IsOptimized="True"
                Duration="0:0:0.3"
                Storyboard.TargetName="ArrowTextBlock"
                Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)"
                To="-0.364" />
            <DoubleAnimation
                d:IsOptimized="True"
                Duration="0:0:0.3"
                Storyboard.TargetName="ArrowTextBlock"
                Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateY)"
                To="-0.364" />
        </Storyboard>
        <Storyboard x:Name="HideSearch">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SearchGrid" Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Collapsed</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SearchGrid" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateY)">
                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="-48" />
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SearchGrid" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Name="HideFilterPopup">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FilterPopup" Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Collapsed</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FilterPopup" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleX)">
                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0.1" />
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FilterPopup" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleY)">
                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0.1" />
            </DoubleAnimationUsingKeyFrames>
            <PointAnimationUsingKeyFrames
                EnableDependentAnimation="True"
                Storyboard.TargetName="FilterPopup"
                Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                <SplinePointKeyFrame KeyTime="0" Value="0.5,0.5" />
                <SplinePointKeyFrame KeyTime="0:0:0.3" Value="0,0" />
            </PointAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowTextBlock" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.Rotation)">
                <EasingDoubleKeyFrame KeyTime="0" Value="180" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Name="ShowOverlay">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayGrid" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
            </DoubleAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OverlayGrid" Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="0">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Visible</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Name="HideOverlay">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OverlayGrid" Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Collapsed</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayGrid" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
    </Page.Resources>

    <Grid
        Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
        AllowDrop="True"
        DragEnter="Grid_DragEnter"
        DragLeave="Grid_DragLeave"
        Drop="Grid_Drop">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState>
                    <Storyboard x:Name="SyncStoryboard" RepeatBehavior="Forever">
                        <DoubleAnimation
                            d:IsOptimized="True"
                            Duration="0:0:1"
                            Storyboard.TargetName="syncIcon"
                            Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.Rotation)"
                            To="360" />
                    </Storyboard>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsSyncing}" />
                    </VisualState.StateTriggers>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <Grid
            x:Name="HeaderGrid"
            Height="48"
            VerticalAlignment="Top"
            Background="{ThemeResource SystemControlBackgroundChromeMediumBrush}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Button
                Style="{StaticResource BlankButtonStyle}"
                Background="Transparent"
                Click="FilterButton_Click">
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        x:Uid="ItemsHeaderTextBlock"
                        Margin="8,0"
                        Style="{StaticResource PageTitleTextBlockStyle}"
                        Text="ITEMS" />
                    <TextBlock
                        x:Name="ArrowTextBlock"
                        VerticalAlignment="Center"
                        FontFamily="Segoe MDL2 Assets"
                        FontSize="13.333"
                        RenderTransformOrigin="0.5,0.45"
                        Text="&#xE011;">
                        <TextBlock.RenderTransform>
                            <CompositeTransform />
                        </TextBlock.RenderTransform>
                    </TextBlock>
                </StackPanel>
            </Button>
            <StackPanel
                Grid.Column="1"
                HorizontalAlignment="Right"
                Orientation="Horizontal">
                <AppBarButton
                    MinWidth="1"
                    IsCompact="True"
                    Visibility="{x:Bind ViewModel.OfflineTasksCountGreaterThanZero, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                        <TextBlock
                            Margin="0,0,4,-2"
                            VerticalAlignment="Bottom"
                            FontSize="12"
                            Text="{x:Bind ViewModel.OfflineTasks.Count, Mode=OneWay}" />
                        <FontIcon FontFamily="Segoe MDL2 Assets" Glyph="&#xE753;" />
                    </StackPanel>
                    <AppBarButton.Flyout>
                        <Flyout Placement="Bottom">
                            <Flyout.FlyoutPresenterStyle>
                                <Style TargetType="FlyoutPresenter">
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="RequestedTheme" Value="Default" />
                                </Style>
                            </Flyout.FlyoutPresenterStyle>
                            <ListView
                                MaxHeight="250"
                                Padding="0,0,12,0"
                                ItemsSource="{x:Bind ViewModel.OfflineTasks}">
                                <ListView.ItemTemplate>
                                    <DataTemplate x:DataType="data:OfflineTaskViewModel">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock
                                                Margin="0,0,8,0"
                                                VerticalAlignment="Center"
                                                FontFamily="Segoe MDL2 Assets"
                                                Text="{x:Bind ActionLogo}"
                                                TextTrimming="CharacterEllipsis" />
                                            <TextBlock Text="{x:Bind ItemTitle}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </Flyout>
                    </AppBarButton.Flyout>
                </AppBarButton>
                <AppBarButton
                    x:Name="searchToggleButton"
                    x:Uid="SearchAppBarButton"
                    Click="searchToggleButton_Click"
                    Icon="Find"
                    IsCompact="True" />
            </StackPanel>
            <AutoSuggestBox
                x:Name="SearchQueryAutoSuggestBox"
                x:Uid="SearchBox"
                Grid.ColumnSpan="2"
                Margin="4"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                x:DeferLoadStrategy="Lazy"
                ItemsSource="{x:Bind ViewModel.SearchSuggestions, Mode=OneWay}"
                PlaceholderText="Search for items…"
                QueryIcon="Find"
                Text="{x:Bind ViewModel.SearchQuery, Mode=TwoWay}"
                Visibility="Collapsed">
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="TextChanged">
                        <core:InvokeCommandAction Command="{x:Bind ViewModel.SearchQueryChangedCommand}" />
                    </core:EventTriggerBehavior>
                    <core:EventTriggerBehavior EventName="QuerySubmitted">
                        <core:InvokeCommandAction Command="{x:Bind ViewModel.SearchQuerySubmittedCommand}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
            </AutoSuggestBox>
        </Grid>

        <controls:AdaptiveGridView
            x:Name="ItemGridView"
            Margin="0,48"
            Padding="4"
            EntranceNavigationTransitionInfo.IsTargetElement="True"
            IsItemClickEnabled="True"
            ItemsSource="{x:Bind ViewModel.Items}"
            MinItemHeight="200"
            MinItemWidth="300">
            <GridView.ItemTemplate>
                <DataTemplate x:DataType="vm:ItemViewModel">
                    <controls:ItemControl />
                </DataTemplate>
            </GridView.ItemTemplate>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="ItemClick">
                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemClickCommand}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="SelectionChanged">
                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemSelectionChangedCommand}" />
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
        </controls:AdaptiveGridView>

        <Grid
            x:Name="OverlayGrid"
            Margin="0,48"
            Background="#4F000000"
            x:DeferLoadStrategy="Lazy"
            PointerPressed="OverlayGrid_PointerPressed"
            Visibility="Collapsed">
            <Grid.RenderTransform>
                <CompositeTransform />
            </Grid.RenderTransform>
            <ScrollViewer
                x:Name="FilterPopup"
                Padding="12"
                Background="{ThemeResource SystemControlBackgroundChromeMediumLowBrush}"
                x:DeferLoadStrategy="Lazy"
                RenderTransformOrigin="0.5,0.5"
                ScrollViewer.VerticalScrollBarVisibility="Auto"
                Visibility="Collapsed">
                <ScrollViewer.RenderTransform>
                    <CompositeTransform />
                </ScrollViewer.RenderTransform>
                <StackPanel>
                    <StackPanel.Resources>
                        <Style
                            x:Name="HeaderTextBlockStyle"
                            BasedOn="{StaticResource BoldTextBlockStyle}"
                            TargetType="TextBlock">
                            <Setter Property="FontSize" Value="12" />
                            <Setter Property="Margin" Value="0,16,0,4" />
                        </Style>
                    </StackPanel.Resources>
                    <TextBlock
                        x:Uid="ItemTypeFilterTextBlock"
                        Margin="0,0,0,4"
                        Style="{StaticResource HeaderTextBlockStyle}"
                        Text="ITEM TYPE" />
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <RadioButton
                            x:Uid="ItemTypeAll"
                            Style="{StaticResource IconAndTextRadioButtonStyle}"
                            Content="all"
                            GroupName="ItemType"
                            IsChecked="{x:Bind ViewModel.CurrentFilterProperties.ItemType, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=All, Mode=OneWay}"
                            Tag="&#xE138;"
                            ToolTipService.ToolTip="All">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemTypeSelectionChangedCommand}" CommandParameter="all" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                        <RadioButton
                            x:Uid="ItemTypeUnread"
                            Grid.Column="1"
                            Style="{StaticResource IconAndTextRadioButtonStyle}"
                            Content="unread"
                            GroupName="ItemType"
                            IsChecked="{x:Bind ViewModel.CurrentFilterProperties.ItemType, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=Unread, Mode=OneWay}"
                            Tag="&#xE052;"
                            ToolTipService.ToolTip="Unread">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemTypeSelectionChangedCommand}" CommandParameter="unread" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                        <RadioButton
                            x:Uid="ItemTypeFavorites"
                            Grid.Row="1"
                            Style="{StaticResource IconAndTextRadioButtonStyle}"
                            Content="favorites"
                            GroupName="ItemType"
                            IsChecked="{x:Bind ViewModel.CurrentFilterProperties.ItemType, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=Favorites, Mode=OneWay}"
                            Tag="&#xE006;"
                            ToolTipService.ToolTip="Starred">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemTypeSelectionChangedCommand}" CommandParameter="starred" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                        <RadioButton
                            x:Uid="ItemTypeArchived"
                            Grid.Row="1"
                            Grid.Column="1"
                            Style="{StaticResource IconAndTextRadioButtonStyle}"
                            Content="archive"
                            GroupName="ItemType"
                            IsChecked="{x:Bind ViewModel.CurrentFilterProperties.ItemType, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=Archived, Mode=OneWay}"
                            Tag="&#xE1D3;"
                            ToolTipService.ToolTip="Archived">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemTypeSelectionChangedCommand}" CommandParameter="archived" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                    </Grid>
                    <TextBlock
                        x:Uid="SortOrderFilterTextBlock"
                        Style="{StaticResource HeaderTextBlockStyle}"
                        Text="SORT ORDER" />
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <RadioButton
                            x:Uid="SortOrderAscendingRadioButton"
                            Style="{StaticResource IconAndTextRadioButtonStyle}"
                            Content="ascending"
                            GroupName="SortOrder"
                            IsChecked="{x:Bind ViewModel.SortOrder, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=Ascending, Mode=OneWay}"
                            Tag="&#xE010;">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemSortOrderChangedCommand}" CommandParameter="asc" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                        <RadioButton
                            x:Uid="SortOrderDescendingRadioButton"
                            Grid.Row="1"
                            Style="{StaticResource IconAndTextRadioButtonStyle}"
                            Content="descending"
                            GroupName="SortOrder"
                            IsChecked="{x:Bind ViewModel.SortOrder, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=Descending, Mode=OneWay}"
                            Tag="&#xE011;">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemSortOrderChangedCommand}" CommandParameter="desc" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                        <RadioButton
                            x:Uid="SortTypeByTitleRadioButton"
                            Grid.Column="1"
                            Style="{StaticResource IconAndTextRadioButtonStyle}"
                            Content="by title"
                            GroupName="SortType"
                            IsChecked="{x:Bind ViewModel.SortType, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=ByTitle, Mode=OneWay}"
                            Tag="&#xE12A;">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemSortTypeChangedCommand}" CommandParameter="title" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                        <RadioButton
                            x:Uid="SortTypeByDateRadioButton"
                            Grid.Row="1"
                            Grid.Column="1"
                            Style="{StaticResource IconAndTextRadioButtonStyle}"
                            Content="by date"
                            GroupName="SortType"
                            IsChecked="{x:Bind ViewModel.SortType, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=ByDate, Mode=OneWay}"
                            Tag="&#xE121;">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.ItemSortTypeChangedCommand}" CommandParameter="date" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                    </Grid>

                    <TextBlock
                        x:Uid="DomainNameFilterTextBlock"
                        Style="{StaticResource HeaderTextBlockStyle}"
                        Text="DOMAIN NAME" />
                    <AutoSuggestBox
                        x:Uid="DomainNameAutoSuggestBox"
                        ItemsSource="{x:Bind ViewModel.DomainNameSuggestions}"
                        PlaceholderText="Enter a domain name…"
                        Text="{x:Bind ViewModel.DomainQuery, Mode=TwoWay}">
                        <interactivity:Interaction.Behaviors>
                            <core:EventTriggerBehavior EventName="TextChanged">
                                <core:InvokeCommandAction Command="{x:Bind ViewModel.DomainQueryChangedCommand}" />
                            </core:EventTriggerBehavior>
                            <core:EventTriggerBehavior EventName="QuerySubmitted">
                                <core:InvokeCommandAction Command="{x:Bind ViewModel.DomainQuerySubmittedCommand}" />
                            </core:EventTriggerBehavior>
                        </interactivity:Interaction.Behaviors>
                    </AutoSuggestBox>
                    <TextBlock
                        x:Uid="TagFilterTextBlock"
                        Style="{StaticResource HeaderTextBlockStyle}"
                        Text="TAG" />
                    <AutoSuggestBox
                        x:Uid="TagAutoSuggestBox"
                        ItemsSource="{x:Bind ViewModel.TagSuggestions}"
                        PlaceholderText="Enter a tag…"
                        Text="{x:Bind ViewModel.TagQuery, Mode=TwoWay}">
                        <interactivity:Interaction.Behaviors>
                            <core:EventTriggerBehavior EventName="TextChanged">
                                <core:InvokeCommandAction Command="{x:Bind ViewModel.TagQueryChangedCommand}" />
                            </core:EventTriggerBehavior>
                            <core:EventTriggerBehavior EventName="QuerySubmitted">
                                <core:InvokeCommandAction Command="{x:Bind ViewModel.TagQuerySubmittedCommand}" />
                            </core:EventTriggerBehavior>
                        </interactivity:Interaction.Behaviors>
                    </AutoSuggestBox>

                    <TextBlock
                        x:Uid="EstimatedReadingTimeFilterTextBlock"
                        Style="{StaticResource HeaderTextBlockStyle}"
                        Text="ESTIMATED READING TIME" />
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <RadioButton
                            Style="{StaticResource TextRadioButtonStyle}"
                            Content="&lt; 5 min"
                            IsChecked="{x:Bind ViewModel.EstimatedReadingTime, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=Short, Mode=OneWay}">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.EstimatedReadingTimeFilterChangedCommand}" CommandParameter="short" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                        <RadioButton
                            Grid.Column="1"
                            Style="{StaticResource TextRadioButtonStyle}"
                            Content="5-15 min"
                            IsChecked="{x:Bind ViewModel.EstimatedReadingTime, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=Medium, Mode=OneWay}">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.EstimatedReadingTimeFilterChangedCommand}" CommandParameter="medium" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                        <RadioButton
                            Grid.Column="2"
                            Style="{StaticResource TextRadioButtonStyle}"
                            Content="&gt; 15 min"
                            IsChecked="{x:Bind ViewModel.EstimatedReadingTime, Converter={StaticResource EnumBooleanConverter}, ConverterParameter=Long, Mode=OneWay}">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Checked">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.EstimatedReadingTimeFilterChangedCommand}" CommandParameter="long" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </RadioButton>
                    </Grid>
                    <TextBlock
                        x:Uid="CreationDateFilterTextBlock"
                        Style="{StaticResource HeaderTextBlockStyle}"
                        Text="CREATION DATE" />
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.Resources>
                            <Style TargetType="CalendarDatePicker">
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="Margin" Value="4" />
                            </Style>
                        </Grid.Resources>
                        <CalendarDatePicker
                            x:Uid="FromCalendarDatePicker"
                            Date="{x:Bind ViewModel.MinDateNullable, Mode=TwoWay}"
                            MaxDate="{x:Bind ViewModel.MaxDate}"
                            PlaceholderText="from">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="DateChanged">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.CreationDateFilterChangedCommand}" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </CalendarDatePicker>
                        <CalendarDatePicker
                            x:Uid="ToCalendarDatePicker"
                            Grid.Column="1"
                            Date="{x:Bind ViewModel.MaxDateNullable, Mode=TwoWay}"
                            MaxDate="{x:Bind ViewModel.MaxDate}"
                            MinDate="{x:Bind ViewModel.MinDate, Mode=OneWay}"
                            PlaceholderText="to">
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="DateChanged">
                                    <core:InvokeCommandAction Command="{x:Bind ViewModel.CreationDateFilterChangedCommand}" />
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </CalendarDatePicker>
                    </Grid>

                    <Grid Margin="0,16,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Button
                            x:Uid="ResetFilterButton"
                            Command="{x:Bind ViewModel.ResetFilterCommand}"
                            Content="Reset" />
                        <Button
                            x:Uid="FilterButton"
                            Grid.Column="1"
                            Style="{StaticResource ActionButtonStyle}"
                            Command="{x:Bind ViewModel.FilterCommand}"
                            Content="Filter" />
                    </Grid>
                </StackPanel>
            </ScrollViewer>
        </Grid>

        <CommandBar x:Name="PrimaryCommandBar" VerticalAlignment="Bottom">
            <AppBarButton
                x:Name="addItemAppBarButton"
                x:Uid="AddItemAppBarButton"
                Command="{x:Bind ViewModel.AddItemCommand}"
                Icon="Add"
                Label="Add item" />
            <AppBarButton
                x:Name="syncAppBarButton"
                x:Uid="SyncAppBarButton"
                Command="{x:Bind ViewModel.SyncCommand}"
                Label="Sync">
                <AppBarButton.Icon>
                    <SymbolIcon
                        x:Name="syncIcon"
                        RenderTransformOrigin="0.5,0.5"
                        Symbol="Sync">
                        <SymbolIcon.RenderTransform>
                            <CompositeTransform />
                        </SymbolIcon.RenderTransform>
                    </SymbolIcon>
                </AppBarButton.Icon>
            </AppBarButton>
            <AppBarButton
                x:Uid="MultipleSelectionAppBarButton"
                Click="EnableMultipleSelection"
                Icon="Bullets"
                Label="Select" />
            <CommandBar.SecondaryCommands>
                <AppBarButton
                    x:Uid="OpenSettingsAppBarButton"
                    Command="{x:Bind ViewModel.NavigateToSettingsPageCommand}"
                    Icon="Setting"
                    Label="Settings" />
            </CommandBar.SecondaryCommands>
        </CommandBar>
        <CommandBar
            x:Name="MultipleSelectionCommandBar"
            VerticalAlignment="Bottom"
            d:IsHidden="True"
            Visibility="{x:Bind ViewModel.IsMultipleSelectionEnabled, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
            <AppBarButton
                x:Uid="EditMultipleItemsAppBarButton"
                Icon="Edit"
                Label="Edit">
                <AppBarButton.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutItem
                            x:Name="MarkItemsAsReadMenuFlyoutItem"
                            x:Uid="MarkAsReadMenuFlyoutItem"
                            Style="{StaticResource MenuFlyoutItemIconTemplate}"
                            Command="{x:Bind ViewModel.MarkItemsAsReadCommand}"
                            Tag="&#xE001;"
                            Text="Mark as read" />
                        <MenuFlyoutItem
                            x:Name="UnmarkItemsAsReadMenuFlyoutItem"
                            x:Uid="UnmarkAsReadMenuFlyoutItem"
                            Style="{StaticResource MenuFlyoutItemIconTemplate}"
                            Command="{x:Bind ViewModel.UnmarkItemsAsReadCommand}"
                            Tag="&#xE109;"
                            Text="Unmark as read" />
                        <MenuFlyoutSeparator />
                        <MenuFlyoutItem
                            x:Name="MarkItemsAsFavoriteMenuFlyoutItem"
                            x:Uid="MarkAsFavoriteMenuFlyoutItem"
                            Style="{StaticResource MenuFlyoutItemIconTemplate}"
                            Command="{x:Bind ViewModel.MarkItemsAsFavoriteCommand}"
                            Tag="&#xE00B;"
                            Text="Mark as favorite" />
                        <MenuFlyoutItem
                            x:Name="UnmarkItemsAsFavoriteMenuFlyoutItem"
                            x:Uid="UnmarkAsFavoriteMenuFlyoutItem"
                            Style="{StaticResource MenuFlyoutItemIconTemplate}"
                            Command="{x:Bind ViewModel.UnmarkItemsAsFavoriteCommand}"
                            Tag="&#xE006;"
                            Text="Unmark as favorite" />
                        <MenuFlyoutSeparator />
                        <MenuFlyoutItem
                            x:Name="ManageTagsMenuFlyoutItem"
                            x:Uid="ManageTagsMenuFlyoutItem"
                            Style="{StaticResource MenuFlyoutItemIconTemplate}"
                            Command="{x:Bind ViewModel.EditTagsCommand}"
                            Tag="&#xE1CB;"
                            Text="Manage tags" />
                        <MenuFlyoutItem
                            x:Name="DeleteMenuFlyoutItem"
                            x:Uid="DeleteMenuFlyoutItem"
                            Style="{StaticResource MenuFlyoutItemIconTemplate}"
                            Command="{x:Bind ViewModel.DeleteItemsCommand}"
                            Tag="&#xE107;"
                            Text="Delete" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
            <AppBarButton
                x:Uid="CancelAppBarButton"
                Click="DisableMultipleSelection"
                Icon="Cancel"
                Label="Cancel" />
        </CommandBar>
        <Grid
            x:Name="dragDropGrid"
            Background="#F2FFFFFF"
            Opacity="0"
            Visibility="Collapsed">
            <TextBlock
                x:Uid="DragDropTextBlock"
                Margin="32"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Style="{StaticResource HeaderTextBlockStyle}"
                Foreground="{ThemeResource SystemControlForegroundAccentBrush}"
                Text="Drop the link here to save it in your wallabag!"
                TextAlignment="Center"
                TextWrapping="Wrap" />
        </Grid>
    </Grid>
</Page>
